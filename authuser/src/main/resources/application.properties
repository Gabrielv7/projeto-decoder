#
server.port=8087
server.servlet.context-path=/ead-authuser/
spring.application.name=ead-authuser
#
#DATABASE CONFIG
spring.datasource.url=jdbc:postgresql://localhost:5432/ead-authuser
spring.datasource.username=postgres
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.jdbc.lob.non.contextual-creation=true
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

#RABBITMQ CONFIG
spring.rabbitmq.addresses=amqps://qjrexrkx:YLMfqdI9ESH89794q-PEL1kayIxQ3RNG@chimpanzee.rmq.cloudamqp.com/qjrexrkx
ead.broker.exchange.userEvent=ead-user-event

#EUREKA CONFIG
eureka.client.serviceUrl.deafultZone=http://localhost:8761/eureka
eureka.instance.hostname=localhost

#LOG CONFIG
logging.level.com.ead=info
#logging.level.org.springframework.web=debug;
spring.output.ansi.enabled=always

#CIRCUITBREAKER CONFIG
#Baseado em tempo
resilience4J.circuitbreaker.instances.circuitbreakerInstance.slidingWindowType=TIME_BASED
#Limite de duas chadas para iniciar a analise
resilience4J.circuitbreaker.instances.circuitbreakerInstance.minimumNumberOfCalls=2
#Verifica se 80% das chamadas deram falha
resilience4J.circuitbreaker.instances.circuitbreakerInstance.failureRateThreshold=80
#Tempo de analise das solicitacoes
resilience4J.circuitbreaker.instances.circuitbreakerInstance.slidingWindowSize=30
#Periodo que vai ficar no estado aberto
resilience4J.circuitbreaker.instances.circuitbreakerInstance.waitDurationInOpenState=30s
#Estado meio aberto analisa 2 solicitações
resilience4J.circuitbreaker.instances.circuitbreakerInstance.permittedNumberOfCallsInHalfOpenState=2
